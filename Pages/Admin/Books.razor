@page "/admin/books"
@page "/admin"
@inherits OwningComponentBase<IBookRepository>


<table class="table table-sm table-striped table-bordered">
    <thead>
        <tr>
            <th>Book ID</th>
            <th>Title</th>
            <th>Author</th>
        </tr>
    </thead>

    <tbody>
        @if (AllBooks.Count() > 0)
            {
                @foreach(var b in AllBooks)
                {
                <tr>
                    <td>@b.BookId</td>
                    <td>@b.Title</td>
                    <td>@b.Author</td>
                    <td><NavLink class="btn btn-warning btn-sm" href="@GetDetailsUrl(b.BookId)">Details</NavLink></td>
                    <td><NavLink class="btn btn-warning btn-sm" href="@GetEditUrl(b.BookId)">Edit</NavLink></td>
                    <td><button class="btn btn-danger btn-sm" @onclick="@(x => RemoveBook(b))">Remove</button></td>
                </tr>
                }
            }
    </tbody>
</table>

<NavLink href="/admin/books/create">Add New Book</NavLink>


@code {
    public IBookRepository repo => Service;

    public IEnumerable<Book> AllBooks { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }

    public async Task UpdateData()
    {
        AllBooks = await repo.Books.ToListAsync();
    }

    public string GetDetailsUrl(long id) => $"/admin/books/details/{id}";
    public string GetEditUrl(long id) => $"/admin/books/edit/{id}";

    public async Task RemoveBook (Book b)
    {
        repo.DeleteBook(b);
        await UpdateData();
    }
}
