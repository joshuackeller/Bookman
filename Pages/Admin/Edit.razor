@page "/admin/books/edit/{id:long}"
@page "/admin/books/create"
@inherits OwningComponentBase<IBookRepository>

<style>
    div.validation-message {
        color: rgb(220,53,69);
        font-weight: 500;
    }
</style>


<h3 class="btn-@ThemeColor text-white text-center p-1 ">@TitleText</h3>

<EditForm Model="b" OnValidSubmit="SaveBook">

    <DataAnnotationsValidator></DataAnnotationsValidator>


    <div class="form-group">
        <label>Book Id:</label>
        <input class="form-control" disabled value="@b.BookId" />
    </div>

    <div class="form-group">
        <label>Title:</label>
        <ValidationMessage For="@(() => b.Title)"></ValidationMessage>
        <InputText class="form-control" @bind-Value="b.Title"></InputText>
    </div>

    <div class="form-group">
        <label>Author:</label>
        <ValidationMessage For="@(() => b.Author)"></ValidationMessage>
        <InputText class="form-control" @bind-Value="b.Author"></InputText>
    </div>

    <div class="form-group">
        <label>ISBN:</label>
        <ValidationMessage For="@(() => b.ISBN)"></ValidationMessage>
        <InputText class="form-control" @bind-Value="b.ISBN"></InputText>
    </div>

    <div class="form-group">
        <label>Publisher:</label>
        <ValidationMessage For="@(() => b.Publisher)"></ValidationMessage>
        <InputText class="form-control" @bind-Value="b.Publisher"></InputText>
    </div>

    <div>
        Professor Hilton and I worked on Category and Classification for a long time, but weren't able to find a perfect solution.
        I built Category and Classification out as seperate models
        so ideally they would be dropdown selects, but Edit Form doesn't allow that. You just have to enter a number
        that corresponds with a valid Classification or Category. If you enter a number outside of the valid range,
        the program will throw an error.
    </div>
    <br />

    <div class="form-group">
        <label>Classification: (see key below for classifications)</label>
        <ValidationMessage For="@(() => b.ClassificationId)"></ValidationMessage>
        <InputNumber class="form-control" @bind-Value="b.ClassificationId">
        </InputNumber>
    </div>

    <div class="form-group">
        <label>Category: (see key below for categories)</label>
        <ValidationMessage For="@(() => b.Category)"></ValidationMessage>

        <InputNumber class="form-control" @bind-Value="b.CategoryId">

        </InputNumber>
    </div>

    <div class="form-group">
        <label>Pages:</label>
        <ValidationMessage For="@(() => b.Pages)"></ValidationMessage>
        <InputNumber class="form-control" @bind-Value="b.Pages"></InputNumber>
    </div>

    <div class="form-group">
        <label>Price:</label>
        <ValidationMessage For="@(() => b.Price)"></ValidationMessage>
        <InputNumber class="form-control" @bind-Value="b.Price"></InputNumber>
    </div>

    <button type="submit" class="btn btn-@ThemeColor">@ButtonText</button>
    <NavLink class="btn btn-secondary" href="/admin">Cancel</NavLink>


</EditForm>


<div>
    <h4>Classifications</h4>
    @foreach (var c in classifications)
    {
        <div>@c.ClassificationId: @c.ClassificationName</div>
    }
</div>

<div>
    <h4>Categories</h4>
    @foreach (var c in categories)
    {
        <div>@c.CategoryId: @c.CategoryName</div>
    }
</div>






@code {

    [Parameter]
    public long Id { get; set; } = 0;

    public string ThemeColor => Id == 0 ? "primary" : "warning";
    public string TitleText => Id == 0 ? "Create" : "Edit";
    public string ButtonText => Id == 0 ? "Add Book" : "Save";


    public Book b { get; set; } = new Book();

    public IBookRepository repo => Service;

    public List<Classification> classifications;

    public List<Category> categories;


    protected override void OnParametersSet()
    {

        classifications = repo.Books.Select(x => x.Classification).Distinct().ToList();
        categories = repo.Books.Select(x => x.Category).Distinct().ToList();



        if (Id != 0)
        {
            b = repo.Books.FirstOrDefault(x => x.BookId == Id);
        }


    }

    public void SaveBook()
    {
        if (Id == 0)
        {
            repo.CreateBook(b);
        }
        else
        {
            repo.SaveBook(b);
        }

        NavManager.NavigateTo("/admin");
    }

    [Inject]
    public NavigationManager NavManager { get; set; }




}